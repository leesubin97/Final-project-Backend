<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="bit.com.a.dao.ReviewDao">
	
	<!-- 디테일에서 리뷰리스트 -->
	<select id="getAllReviewList" parameterType="bit.com.a.dto.ReviewDto" resultType="bit.com.a.dto.ReviewDto">
		SELECT SEQ, RNUM, ID, STAR, CONTENT, RDATE, IMAGE
		FROM 	(SELECT ROW_NUMBER()OVER(ORDER BY RNUM DESC) AS SEQ, RNUM, ID, STAR, CONTENT, RDATE, IMAGE
				FROM REVIEW
				WHERE DEL=0 AND PRODNUM=#{prodNum})
		WHERE SEQ BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 라뷰 총 수 가져오기 -->
	<select id="getReviewCount" parameterType="bit.com.a.dto.ReviewDto" resultType="java.lang.Integer">
		SELECT NVL(COUNT(*),0)
		FROM REVIEW
		WHERE PRODNUM=#{prodNum}
	</select>
	
	<!-- 디테일에서 평균평점 -->
	<select id="detailStarAvg" parameterType="bit.com.a.dto.ReviewDto" resultType="java.lang.Double">
		SELECT ROUND(AVG(STAR),1)
		FROM REVIEW
		WHERE PRODNUM=#{prodNum}
	</select>
	
	<!-- 리뷰작성 -->
	<insert id="writeReview" parameterType="bit.com.a.dto.ReviewDto">
		INSERT INTO REVIEW(RNUM
							,ID
							,PRODNUM
							,STAR
							,CONTENT
							,IMAGE
							,RDATE
							,DEL)
		VALUES(RNUMSEQ.NEXTVAL
				,#{id}
				,#{prodNum}
				,#{star}
				,#{content}
				,#{image}
				,SYSDATE
				,0)
	</insert>
	
	<!-- 삭제 -->
	<update id="deleteReview" parameterType="java.lang.Integer">
		UPDATE REVIEW
		SET DEL=1
		WHERE RNUM=#{rnum}
	</update>
	
	<!-- 상품정보 불러오기 -->
	<select id="getProductInfo" parameterType="java.lang.Integer" resultType="bit.com.a.dto.ProductDto">
		SELECT *
		FROM PRODUCT
		WHERE PRODNUM=#{prodNum}
	</select>
	
	<update id="reviewPoint" parameterType="bit.com.a.dto.MemberDto">
		UPDATE ALL_MEMBER 
		SET MEMPOINT = MEMPOINT+500
		WHERE ID=#{id}
	</update>
	
	<update id="photoPoint" parameterType="bit.com.a.dto.MemberDto">
		UPDATE ALL_MEMBER 
		SET MEMPOINT = MEMPOINT+1000
		WHERE ID=#{id}
	</update>
	
	<!-- 평균평점 -->
	<select id="avgReview" parameterType="java.lang.Integer" resultType="bit.com.a.dto.ReviewDto">
		SELECT STAR, NVL(COUNT(STAR), 0), ROUND(RATIO_TO_REPORT(COUNT(*)) OVER(),2)*100 || '%' AS RATING
		FROM REVIEW
		WHERE PRODNUM=#{prodNum}
		GROUP BY STAR
	</select>
	
	
	
</mapper>





